httpd 과부화 테스트
apache 연결 / nginx 연결

apache 연결 -> network socket으로 하기

nginx 는 unix socket으로 

Apache로 작업 할 때 php 실행되는 방법은 mod_php php-fpm

2. mod_php 사용 : php 인터프리터는 Apache 프로세스 내에 일종에 내장이 됨.
Apache가 외부 프로세스와 통신하지 않고 php를 직접 다뤄서 결과를 낼 수 있음.
-> 웹 서버 내부에 위치함으로 한번만 시작하고 설정과 확장을 한번만 로드하여 세션간에 정보를 저장
단점
- Apache 2.4 버전부터 지원하지 않음.(중요)
- 모든 httpd 프로세스에 항상 로드가 되며, httpd가 정적/비 php 콘텐츠를 제공하는 경우에도 해당 메모리는 사용중이다.

3. PHP-fpm(PHP FastCGI Process Manager) : 보통의 CGI보다 빠른 버전
FastCGI는 클라이언트의 요청을 전달할 때마다 새로운 프로세스를 생성하는 것이 아니라
이미 생성된 프로세스를 재활용하는 방식을 사용해서 처리가 빠름

장점
- 독립적인 프로세스라서 Apache httpd에 영향을 주지 않음.
- 안전하고 빠르게 사용 가능
  -> unix socket 때문인데 apache에서 지원 여부? 있긴하지만 대부분 (TCP)로 설정을 한다.

참고자료 : https://cwiki.apache.org/confluence/display/HTTPD/PHP-FPM


아파치 동작모드
1. prefork 방식
-각 요청을 프로세스로 받아 처리
- 요청이 독립적인 프로세스로 처리되기 때문에, 프로세스 오류가 발생해도 다른 요청에 영향을 주지 않음( 메모리 사용공간도 독립적)
- 프로세스가 많아짐에 따라 시스템 메모리, CPU리소스에 부하를 주기 쉬움

2. worker 방식
- 각 요청을 프로세스의 스레드로 받아 처리
- 연결 마다 같은 메모리 공간을 공유하여 경합이 발생할 수 있다.
- 프로세스 별 스레드 개수 제한까지 요청을 받으며, 일정 개수가 넘어갈 경우, 프로세스를 생성하여 처리
- prefork에 비해서 시스템 리소스 부하가 적음
- 프로세스 오류가 발생할 때, 프로세스 내 스레드까지 죽어버리므로 여러 연결이 동시에 끊어질수 있음.
- 대량 연결이 발생하는 웹서버에서 많이 사용됨

3. event 방식 ( Apache 2.4 ~)
- 기존에는 클라이언트의 연결이 완전히 끊나지 않는 한 하나의 프로세스 or 스레드를 계속 물고 있어 
   리소스 부하가 생겨 대량 접속이 발생하는 경우 효율이 떨어지는 이슈를 가지고 있었다.
- event 방식에서 클라이언트 요청을 받는 스레드를 따로 두어, 분산된 처리를 한다.


유닉스 도메인 소켓(Unix Domain Socket)
API로 데이터를 주고 받을 수 있는 local file 기반의 소켓

TCP Socket과 차이점은 local host의 process간의 통신이므로 속도가 매우 빠르고 메모리 소모가 작다는 장점이 있다.
